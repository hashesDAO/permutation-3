/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestCollectionPredicates1,
  TestCollectionPredicates1Interface,
} from "../TestCollectionPredicates1";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_hashesTokenId",
        type: "uint256",
      },
    ],
    name: "getTokenMintFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_hashesTokenId",
        type: "uint256",
      },
    ],
    name: "isTokenEligibleToMint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101bc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631cc1fddb1461003b5780639626f09c14610064575b600080fd5b61004e6100493660046100da565b610084565b60405161005b9190610135565b60405180910390f35b6100776100723660046100da565b6100be565b60405161005b9190610127565b6000610091600383610143565b156100a35766470de4df8200006100ac565b662386f26fc100005b66ffffffffffffff1690505b92915050565b60006100cb600283610143565b159392505050565b80356100b8565b600080604083850312156100f0576100f0600080fd5b60006100fc85856100d3565b925050602061010d858286016100d3565b9150509250929050565b8015155b82525050565b8061011b565b602081016100b88284610117565b602081016100b88284610121565b60008261015257610152610157565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212205ea7ce8fa04ff411531b39ca3547590d201e865367595b6c0a338f63bc0af6cd64736f6c63430008060033";

type TestCollectionPredicates1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCollectionPredicates1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCollectionPredicates1__factory extends ContractFactory {
  constructor(...args: TestCollectionPredicates1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestCollectionPredicates1> {
    return super.deploy(overrides || {}) as Promise<TestCollectionPredicates1>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestCollectionPredicates1 {
    return super.attach(address) as TestCollectionPredicates1;
  }
  connect(signer: Signer): TestCollectionPredicates1__factory {
    return super.connect(signer) as TestCollectionPredicates1__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCollectionPredicates1Interface {
    return new utils.Interface(_abi) as TestCollectionPredicates1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestCollectionPredicates1 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestCollectionPredicates1;
  }
}
