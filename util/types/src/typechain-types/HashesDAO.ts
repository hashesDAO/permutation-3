/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ReceiptStruct = {
  hasVoted: boolean;
  support: boolean;
  votes: BigNumberish;
};

export type ReceiptStructOutput = [boolean, boolean, BigNumber] & {
  hasVoted: boolean;
  support: boolean;
  votes: BigNumber;
};

export interface HashesDAOInterface extends utils.Interface {
  functions: {
    "authoritiesActive()": FunctionFragment;
    "cancel(uint128)": FunctionFragment;
    "castVote(uint128,bool,bool,bytes)": FunctionFragment;
    "castVoteBySig(uint128,bool,bool,bytes,bytes)": FunctionFragment;
    "deactivateAuthorities(bytes[],address[])": FunctionFragment;
    "execute(uint128)": FunctionFragment;
    "getActions(uint128)": FunctionFragment;
    "getAuthorityStatus(address)": FunctionFragment;
    "getIsQueuedTransaction(bytes32)": FunctionFragment;
    "getLatestProposalId(address)": FunctionFragment;
    "getProposal(uint128)": FunctionFragment;
    "getProposalCount()": FunctionFragment;
    "getReceipt(uint128,address)": FunctionFragment;
    "gracePeriod()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposalMaxOperations()": FunctionFragment;
    "proposalThreshold()": FunctionFragment;
    "propose(address[],uint256[],string[],bytes[],string)": FunctionFragment;
    "queue(uint128)": FunctionFragment;
    "quorumAuthorities()": FunctionFragment;
    "quorumVotes()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "state(uint128)": FunctionFragment;
    "timelockDelay()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
    "veto(uint128,bytes[])": FunctionFragment;
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authoritiesActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, boolean, boolean, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAuthorities",
    values: [BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorityStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsQueuedTransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestProposalId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string[], BigNumberish[], string[], BytesLike[], string]
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "quorumAuthorities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "timelockDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "veto",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "authoritiesActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAuthorities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsQueuedTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumAuthorities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timelockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "AuthoritiesDeactivated()": EventFragment;
    "CancelTransaction(bytes32,address,uint256,string,bytes,uint256)": EventFragment;
    "ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalCanceled(uint128)": EventFragment;
    "ProposalCreated(uint128,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": EventFragment;
    "ProposalExecuted(uint128)": EventFragment;
    "ProposalQueued(uint128,uint256)": EventFragment;
    "ProposalVetoed(uint128,uint256)": EventFragment;
    "QueueTransaction(bytes32,address,uint256,string,bytes,uint256)": EventFragment;
    "VoteCast(address,uint128,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthoritiesDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVetoed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueueTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export type AuthoritiesDeactivatedEvent = TypedEvent<[], {}>;

export type AuthoritiesDeactivatedEventFilter =
  TypedEventFilter<AuthoritiesDeactivatedEvent>;

export type CancelTransactionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  {
    txHash: string;
    target: string;
    value: BigNumber;
    signature: string;
    data: string;
    eta: BigNumber;
  }
>;

export type CancelTransactionEventFilter =
  TypedEventFilter<CancelTransactionEvent>;

export type ExecuteTransactionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  {
    txHash: string;
    target: string;
    value: BigNumber;
    signature: string;
    data: string;
    eta: BigNumber;
  }
>;

export type ExecuteTransactionEventFilter =
  TypedEventFilter<ExecuteTransactionEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ProposalCanceledEvent = TypedEvent<[BigNumber], { id: BigNumber }>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export type ProposalCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string[],
    BigNumber[],
    string[],
    string[],
    BigNumber,
    BigNumber,
    string
  ],
  {
    id: BigNumber;
    proposer: string;
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    startBlock: BigNumber;
    endBlock: BigNumber;
    description: string;
  }
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export type ProposalExecutedEvent = TypedEvent<[BigNumber], { id: BigNumber }>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export type ProposalQueuedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { id: BigNumber; eta: BigNumber }
>;

export type ProposalQueuedEventFilter = TypedEventFilter<ProposalQueuedEvent>;

export type ProposalVetoedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { id: BigNumber; quorum: BigNumber }
>;

export type ProposalVetoedEventFilter = TypedEventFilter<ProposalVetoedEvent>;

export type QueueTransactionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  {
    txHash: string;
    target: string;
    value: BigNumber;
    signature: string;
    data: string;
    eta: BigNumber;
  }
>;

export type QueueTransactionEventFilter =
  TypedEventFilter<QueueTransactionEvent>;

export type VoteCastEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber],
  { voter: string; proposalId: BigNumber; support: boolean; votes: BigNumber }
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface HashesDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HashesDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authoritiesActive(overrides?: CallOverrides): Promise<[boolean]>;

    cancel(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVote(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVoteBySig(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivateAuthorities(
      _signatures: BytesLike[],
      _authorities: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActions(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], string[], string[]] & {
        targets: string[];
        values: BigNumber[];
        signatures: string[];
        calldatas: string[];
      }
    >;

    getAuthorityStatus(
      _authority: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsQueuedTransaction(
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLatestProposalId(
      _proposer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getProposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReceipt(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[ReceiptStructOutput]>;

    gracePeriod(overrides?: CallOverrides): Promise<[number]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<[number]>;

    proposalThreshold(overrides?: CallOverrides): Promise<[number]>;

    propose(
      _targets: string[],
      _values: BigNumberish[],
      _signatures: string[],
      _calldatas: BytesLike[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queue(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quorumAuthorities(overrides?: CallOverrides): Promise<[BigNumber]>;

    quorumVotes(overrides?: CallOverrides): Promise<[number]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    timelockDelay(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    veto(
      _proposalId: BigNumberish,
      _signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votingDelay(overrides?: CallOverrides): Promise<[number]>;

    votingPeriod(overrides?: CallOverrides): Promise<[number]>;
  };

  authoritiesActive(overrides?: CallOverrides): Promise<boolean>;

  cancel(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVote(
    _proposalId: BigNumberish,
    _support: boolean,
    _deactivate: boolean,
    _deactivateSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVoteBySig(
    _proposalId: BigNumberish,
    _support: boolean,
    _deactivate: boolean,
    _deactivateSignature: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivateAuthorities(
    _signatures: BytesLike[],
    _authorities: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _proposalId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActions(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], string[], string[]] & {
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
    }
  >;

  getAuthorityStatus(
    _authority: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsQueuedTransaction(
    _txHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLatestProposalId(
    _proposer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposal(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  getReceipt(
    _proposalId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<ReceiptStructOutput>;

  gracePeriod(overrides?: CallOverrides): Promise<number>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposalMaxOperations(overrides?: CallOverrides): Promise<number>;

  proposalThreshold(overrides?: CallOverrides): Promise<number>;

  propose(
    _targets: string[],
    _values: BigNumberish[],
    _signatures: string[],
    _calldatas: BytesLike[],
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queue(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quorumAuthorities(overrides?: CallOverrides): Promise<BigNumber>;

  quorumVotes(overrides?: CallOverrides): Promise<number>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  state(_proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  timelockDelay(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  veto(
    _proposalId: BigNumberish,
    _signatures: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votingDelay(overrides?: CallOverrides): Promise<number>;

  votingPeriod(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    authoritiesActive(overrides?: CallOverrides): Promise<boolean>;

    cancel(_proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    castVote(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteBySig(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateAuthorities(
      _signatures: BytesLike[],
      _authorities: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActions(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], string[], string[]] & {
        targets: string[];
        values: BigNumber[];
        signatures: string[];
        calldatas: string[];
      }
    >;

    getAuthorityStatus(
      _authority: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsQueuedTransaction(
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLatestProposalId(
      _proposer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    getReceipt(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<ReceiptStructOutput>;

    gracePeriod(overrides?: CallOverrides): Promise<number>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<number>;

    proposalThreshold(overrides?: CallOverrides): Promise<number>;

    propose(
      _targets: string[],
      _values: BigNumberish[],
      _signatures: string[],
      _calldatas: BytesLike[],
      _description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queue(_proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    quorumAuthorities(overrides?: CallOverrides): Promise<BigNumber>;

    quorumVotes(overrides?: CallOverrides): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    timelockDelay(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    veto(
      _proposalId: BigNumberish,
      _signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    votingDelay(overrides?: CallOverrides): Promise<number>;

    votingPeriod(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "AuthoritiesDeactivated()"(): AuthoritiesDeactivatedEventFilter;
    AuthoritiesDeactivated(): AuthoritiesDeactivatedEventFilter;

    "CancelTransaction(bytes32,address,uint256,string,bytes,uint256)"(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): CancelTransactionEventFilter;
    CancelTransaction(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): CancelTransactionEventFilter;

    "ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256)"(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): ExecuteTransactionEventFilter;
    ExecuteTransaction(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): ExecuteTransactionEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProposalCanceled(uint128)"(
      id?: BigNumberish | null
    ): ProposalCanceledEventFilter;
    ProposalCanceled(id?: BigNumberish | null): ProposalCanceledEventFilter;

    "ProposalCreated(uint128,address,address[],uint256[],string[],bytes[],uint256,uint256,string)"(
      id?: BigNumberish | null,
      proposer?: string | null,
      targets?: null,
      values?: null,
      signatures?: null,
      calldatas?: null,
      startBlock?: null,
      endBlock?: null,
      description?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      id?: BigNumberish | null,
      proposer?: string | null,
      targets?: null,
      values?: null,
      signatures?: null,
      calldatas?: null,
      startBlock?: null,
      endBlock?: null,
      description?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint128)"(
      id?: BigNumberish | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(id?: BigNumberish | null): ProposalExecutedEventFilter;

    "ProposalQueued(uint128,uint256)"(
      id?: BigNumberish | null,
      eta?: null
    ): ProposalQueuedEventFilter;
    ProposalQueued(
      id?: BigNumberish | null,
      eta?: null
    ): ProposalQueuedEventFilter;

    "ProposalVetoed(uint128,uint256)"(
      id?: BigNumberish | null,
      quorum?: null
    ): ProposalVetoedEventFilter;
    ProposalVetoed(
      id?: BigNumberish | null,
      quorum?: null
    ): ProposalVetoedEventFilter;

    "QueueTransaction(bytes32,address,uint256,string,bytes,uint256)"(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): QueueTransactionEventFilter;
    QueueTransaction(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): QueueTransactionEventFilter;

    "VoteCast(address,uint128,bool,uint256)"(
      voter?: string | null,
      proposalId?: BigNumberish | null,
      support?: null,
      votes?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: string | null,
      proposalId?: BigNumberish | null,
      support?: null,
      votes?: null
    ): VoteCastEventFilter;
  };

  estimateGas: {
    authoritiesActive(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVote(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVoteBySig(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivateAuthorities(
      _signatures: BytesLike[],
      _authorities: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActions(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorityStatus(
      _authority: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsQueuedTransaction(
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestProposalId(
      _proposer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    getReceipt(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    propose(
      _targets: string[],
      _values: BigNumberish[],
      _signatures: string[],
      _calldatas: BytesLike[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queue(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quorumAuthorities(overrides?: CallOverrides): Promise<BigNumber>;

    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelockDelay(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    veto(
      _proposalId: BigNumberish,
      _signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authoritiesActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVoteBySig(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivateAuthorities(
      _signatures: BytesLike[],
      _authorities: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActions(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorityStatus(
      _authority: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsQueuedTransaction(
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestProposalId(
      _proposer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReceipt(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propose(
      _targets: string[],
      _values: BigNumberish[],
      _signatures: string[],
      _calldatas: BytesLike[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queue(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quorumAuthorities(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorumVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelockDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veto(
      _proposalId: BigNumberish,
      _signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
