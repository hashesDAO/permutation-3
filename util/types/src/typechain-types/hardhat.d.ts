/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IAdminControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAdminControl__factory>;
    getContractFactory(
      name: "IRoyaltyEngineV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoyaltyEngineV1__factory>;
    getContractFactory(
      name: "IRoyaltyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoyaltyRegistry__factory>;
    getContractFactory(
      name: "SuperRareContracts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SuperRareContracts__factory>;
    getContractFactory(
      name: "RoyaltyEngineV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoyaltyEngineV1__factory>;
    getContractFactory(
      name: "RoyaltyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoyaltyRegistry__factory>;
    getContractFactory(
      name: "IArtBlocks",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArtBlocks__factory>;
    getContractFactory(
      name: "IDigitalax",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDigitalax__factory>;
    getContractFactory(
      name: "IDigitalaxAccessControls",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDigitalaxAccessControls__factory>;
    getContractFactory(
      name: "IEIP2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP2981__factory>;
    getContractFactory(
      name: "IFoundation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFoundation__factory>;
    getContractFactory(
      name: "IFoundationTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFoundationTreasury__factory>;
    getContractFactory(
      name: "IFoundationTreasuryNode",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFoundationTreasuryNode__factory>;
    getContractFactory(
      name: "IManifold",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IManifold__factory>;
    getContractFactory(
      name: "INiftyBuilderInstance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INiftyBuilderInstance__factory>;
    getContractFactory(
      name: "INiftyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INiftyRegistry__factory>;
    getContractFactory(
      name: "IRaribleV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRaribleV1__factory>;
    getContractFactory(
      name: "IRaribleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRaribleV2__factory>;
    getContractFactory(
      name: "ISuperRareRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperRareRegistry__factory>;
    getContractFactory(
      name: "IZoraMarket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZoraMarket__factory>;
    getContractFactory(
      name: "IZoraMedia",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZoraMedia__factory>;
    getContractFactory(
      name: "IZoraOverride",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZoraOverride__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "CollectionFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CollectionFactory__factory>;
    getContractFactory(
      name: "CollectionNFTCloneableV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CollectionNFTCloneableV1__factory>;
    getContractFactory(
      name: "CollectionPaymentSplitterCloneable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CollectionPaymentSplitterCloneable__factory>;
    getContractFactory(
      name: "MedleyLimitedEditionPredicates",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MedleyLimitedEditionPredicates__factory>;
    getContractFactory(
      name: "OwnableCloneable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableCloneable__factory>;
    getContractFactory(
      name: "PaymentSplitterCloneable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PaymentSplitterCloneable__factory>;
    getContractFactory(
      name: "Hashes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hashes__factory>;
    getContractFactory(
      name: "HashesDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HashesDAO__factory>;
    getContractFactory(
      name: "ICollection",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICollection__factory>;
    getContractFactory(
      name: "ICollectionCloneable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICollectionCloneable__factory>;
    getContractFactory(
      name: "ICollectionFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICollectionFactory__factory>;
    getContractFactory(
      name: "ICollectionNFTCloneableV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICollectionNFTCloneableV1__factory>;
    getContractFactory(
      name: "ICollectionNFTEligibilityPredicate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICollectionNFTEligibilityPredicate__factory>;
    getContractFactory(
      name: "ICollectionNFTMintFeePredicate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICollectionNFTMintFeePredicate__factory>;
    getContractFactory(
      name: "IERC2981Royalties",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2981Royalties__factory>;
    getContractFactory(
      name: "IHashes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHashes__factory>;
    getContractFactory(
      name: "IHashesDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHashesDAO__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "TestCollectionPredicates1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCollectionPredicates1__factory>;
    getContractFactory(
      name: "TestCollectionPredicates2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCollectionPredicates2__factory>;
    getContractFactory(
      name: "TestCollectionStandalone",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCollectionStandalone__factory>;
    getContractFactory(
      name: "TestHashes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestHashes__factory>;
    getContractFactory(
      name: "TestRoyaltyEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRoyaltyEngine__factory>;
    getContractFactory(
      name: "TestRoyaltyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRoyaltyRegistry__factory>;

    getContractAt(
      name: "IAdminControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAdminControl>;
    getContractAt(
      name: "IRoyaltyEngineV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoyaltyEngineV1>;
    getContractAt(
      name: "IRoyaltyRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoyaltyRegistry>;
    getContractAt(
      name: "SuperRareContracts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SuperRareContracts>;
    getContractAt(
      name: "RoyaltyEngineV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoyaltyEngineV1>;
    getContractAt(
      name: "RoyaltyRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoyaltyRegistry>;
    getContractAt(
      name: "IArtBlocks",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IArtBlocks>;
    getContractAt(
      name: "IDigitalax",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDigitalax>;
    getContractAt(
      name: "IDigitalaxAccessControls",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDigitalaxAccessControls>;
    getContractAt(
      name: "IEIP2981",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP2981>;
    getContractAt(
      name: "IFoundation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFoundation>;
    getContractAt(
      name: "IFoundationTreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFoundationTreasury>;
    getContractAt(
      name: "IFoundationTreasuryNode",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFoundationTreasuryNode>;
    getContractAt(
      name: "IManifold",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IManifold>;
    getContractAt(
      name: "INiftyBuilderInstance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INiftyBuilderInstance>;
    getContractAt(
      name: "INiftyRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INiftyRegistry>;
    getContractAt(
      name: "IRaribleV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRaribleV1>;
    getContractAt(
      name: "IRaribleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRaribleV2>;
    getContractAt(
      name: "ISuperRareRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperRareRegistry>;
    getContractAt(
      name: "IZoraMarket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZoraMarket>;
    getContractAt(
      name: "IZoraMedia",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZoraMedia>;
    getContractAt(
      name: "IZoraOverride",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IZoraOverride>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "CollectionFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CollectionFactory>;
    getContractAt(
      name: "CollectionNFTCloneableV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CollectionNFTCloneableV1>;
    getContractAt(
      name: "CollectionPaymentSplitterCloneable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CollectionPaymentSplitterCloneable>;
    getContractAt(
      name: "MedleyLimitedEditionPredicates",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MedleyLimitedEditionPredicates>;
    getContractAt(
      name: "OwnableCloneable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableCloneable>;
    getContractAt(
      name: "PaymentSplitterCloneable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PaymentSplitterCloneable>;
    getContractAt(
      name: "Hashes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Hashes>;
    getContractAt(
      name: "HashesDAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HashesDAO>;
    getContractAt(
      name: "ICollection",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICollection>;
    getContractAt(
      name: "ICollectionCloneable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICollectionCloneable>;
    getContractAt(
      name: "ICollectionFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICollectionFactory>;
    getContractAt(
      name: "ICollectionNFTCloneableV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICollectionNFTCloneableV1>;
    getContractAt(
      name: "ICollectionNFTEligibilityPredicate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICollectionNFTEligibilityPredicate>;
    getContractAt(
      name: "ICollectionNFTMintFeePredicate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICollectionNFTMintFeePredicate>;
    getContractAt(
      name: "IERC2981Royalties",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2981Royalties>;
    getContractAt(
      name: "IHashes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHashes>;
    getContractAt(
      name: "IHashesDAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHashesDAO>;
    getContractAt(
      name: "IOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "TestCollectionPredicates1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCollectionPredicates1>;
    getContractAt(
      name: "TestCollectionPredicates2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCollectionPredicates2>;
    getContractAt(
      name: "TestCollectionStandalone",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCollectionStandalone>;
    getContractAt(
      name: "TestHashes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestHashes>;
    getContractAt(
      name: "TestRoyaltyEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRoyaltyEngine>;
    getContractAt(
      name: "TestRoyaltyRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRoyaltyRegistry>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
