/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ReceiptStruct = {
  hasVoted: boolean;
  support: boolean;
  votes: BigNumberish;
};

export type ReceiptStructOutput = [boolean, boolean, BigNumber] & {
  hasVoted: boolean;
  support: boolean;
  votes: BigNumber;
};

export interface IHashesDAOInterface extends utils.Interface {
  functions: {
    "cancel(uint128)": FunctionFragment;
    "castVote(uint128,bool,bool,bytes)": FunctionFragment;
    "castVoteBySig(uint128,bool,bool,bytes,bytes)": FunctionFragment;
    "deactivateAuthorities(bytes[],address[])": FunctionFragment;
    "execute(uint128)": FunctionFragment;
    "getActions(uint128)": FunctionFragment;
    "getAuthorityStatus(address)": FunctionFragment;
    "getIsQueuedTransaction(bytes32)": FunctionFragment;
    "getLatestProposalId(address)": FunctionFragment;
    "getProposal(uint128)": FunctionFragment;
    "getProposalCount()": FunctionFragment;
    "getReceipt(uint128,address)": FunctionFragment;
    "propose(address[],uint256[],string[],bytes[],string)": FunctionFragment;
    "queue(uint128)": FunctionFragment;
    "state(uint128)": FunctionFragment;
    "veto(uint128,bytes[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, boolean, boolean, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAuthorities",
    values: [BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorityStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsQueuedTransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestProposalId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string[], BigNumberish[], string[], BytesLike[], string]
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "veto",
    values: [BigNumberish, BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAuthorities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsQueuedTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veto", data: BytesLike): Result;

  events: {};
}

export interface IHashesDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHashesDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancel(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVote(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVoteBySig(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivateAuthorities(
      _signatures: BytesLike[],
      _authorities: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActions(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getAuthorityStatus(
      _authority: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsQueuedTransaction(
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLatestProposalId(
      _proposer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getProposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReceipt(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[ReceiptStructOutput]>;

    propose(
      _targets: string[],
      _values: BigNumberish[],
      _signatures: string[],
      _calldatas: BytesLike[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queue(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    veto(
      _proposalId: BigNumberish,
      _signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancel(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVote(
    _proposalId: BigNumberish,
    _support: boolean,
    _deactivate: boolean,
    _deactivateSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVoteBySig(
    _proposalId: BigNumberish,
    _support: boolean,
    _deactivate: boolean,
    _deactivateSignature: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivateAuthorities(
    _signatures: BytesLike[],
    _authorities: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _proposalId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActions(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getAuthorityStatus(
    _authority: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsQueuedTransaction(
    _txHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLatestProposalId(
    _proposer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposal(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  getReceipt(
    _proposalId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<ReceiptStructOutput>;

  propose(
    _targets: string[],
    _values: BigNumberish[],
    _signatures: string[],
    _calldatas: BytesLike[],
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queue(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  state(_proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  veto(
    _proposalId: BigNumberish,
    _signatures: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancel(_proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    castVote(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteBySig(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateAuthorities(
      _signatures: BytesLike[],
      _authorities: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActions(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuthorityStatus(
      _authority: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsQueuedTransaction(
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLatestProposalId(
      _proposer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    getReceipt(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<ReceiptStructOutput>;

    propose(
      _targets: string[],
      _values: BigNumberish[],
      _signatures: string[],
      _calldatas: BytesLike[],
      _description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queue(_proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    veto(
      _proposalId: BigNumberish,
      _signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    cancel(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVote(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVoteBySig(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivateAuthorities(
      _signatures: BytesLike[],
      _authorities: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActions(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorityStatus(
      _authority: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsQueuedTransaction(
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestProposalId(
      _proposer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    getReceipt(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      _targets: string[],
      _values: BigNumberish[],
      _signatures: string[],
      _calldatas: BytesLike[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queue(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veto(
      _proposalId: BigNumberish,
      _signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVoteBySig(
      _proposalId: BigNumberish,
      _support: boolean,
      _deactivate: boolean,
      _deactivateSignature: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivateAuthorities(
      _signatures: BytesLike[],
      _authorities: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActions(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorityStatus(
      _authority: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsQueuedTransaction(
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestProposalId(
      _proposer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReceipt(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      _targets: string[],
      _values: BigNumberish[],
      _signatures: string[],
      _calldatas: BytesLike[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queue(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veto(
      _proposalId: BigNumberish,
      _signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
